// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //directUrl = env("DIRECT_URL")
}


enum ResponseStatus {
  ATTEND    // 出席
  UNDECIDED // 未定
  ABSENT    // 欠席
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String       @id @default(cuid())
  name      String       @db.VarChar(50)
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  comment   String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  main      Boolean      @default(false)  // メイン担当者フラグ
  events    Event[]
  responses Response[]
  accounts      Account[]
  sessions      Session[]

  role          String       @default("user") @db.VarChar(20)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Event {
  id        String       @id @default(cuid())
  name      String       @db.VarChar(30)
  image     String?
  memo      String?
  userId    String?
  responseDeadline DateTime? // 回答期限（任意項目）
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      User?        @relation(fields: [userId], references: [id])
  schedules Schedule[]
  images    EventImage[]
  restaurants Restaurant[]
}

model Schedule {
  id        Int       @id @default(autoincrement())
  eventId   String
  date      DateTime
  time      String    @db.VarChar(10)
  isConfirmed Boolean @default(false) // NULL 許可しない
  displayOrder Int    @default(0) // 表示順序を管理するカラム
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  event     Event     @relation(fields: [eventId], references: [id])
  responses Response[]
}

model Response {
  id          Int            @id @default(autoincrement())
  userId      String
  scheduleId  Int
  response    ResponseStatus
  comment     String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id])
  schedule    Schedule       @relation(fields: [scheduleId], references: [id])

  @@unique([scheduleId, userId]) // 複合一意キー制約
}

model EventImage {
  id        Int      @id @default(autoincrement())
  eventId   String
  imagePath String
  event     Event    @relation(fields: [eventId], references: [id])
}

// レストラン候補モデル
model Restaurant {
  id           String   @id @default(cuid())
  name         String   // 店舗名
  imageUrl     String?  // 店舗画像URL（任意）
  websiteUrl   String?  // 店舗ウェブサイトURL（任意）
  description  String?  // 説明（任意）
  decisionFlag Boolean  @default(false) // 確定フラグ
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  eventId      String   // 関連するイベントID
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  votes        Vote[]   // 投票との関連

  @@index([eventId])
}

// 投票モデル
model Vote {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  voterToken   String     // 投票者を識別するトークン（匿名）
  restaurantId String     // 投票対象のレストランID
  eventId      String     // イベントID（一人一票の制限のため）
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([eventId, voterToken]) // 1イベントにつき1ユーザー1票の制限
  @@index([restaurantId])
  @@index([eventId])
}

// 満足度アンケートモデル
model SatisfactionTable {
  id           String     @id @default(cuid())
  eventId      String     // 関連するイベントID
  rating       Int        // 5段階評価 (1-5)
  comment      String?    // 追加コメント（任意）
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([eventId])
}