// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


enum ResponseStatus {
  ATTEND    // 出席
  UNDECIDED // 未定
  ABSENT    // 欠席
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String       @id @default(cuid())
  name      String       @db.VarChar(50)
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  comment   String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  events    Event[]
  responses Response[]
  accounts      Account[]
  sessions      Session[]

  role          String       @default("user") @db.VarChar(20)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Event {
  id        String       @id @default(cuid())
  name      String       @db.VarChar(30)
  image     String?
  memo      String?
  userId    String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      User?        @relation(fields: [userId], references: [id])
  schedules Schedule[]
  images    EventImage[]
}

model Schedule {
  id        Int       @id @default(autoincrement())
  eventId   String
  date      DateTime
  time      String    @db.VarChar(10)
  isConfirmed Boolean @default(false) // NULL 許可しない
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  event     Event     @relation(fields: [eventId], references: [id])
  responses Response[]
}

model Response {
  id          Int            @id @default(autoincrement())
  userId      String
  scheduleId  Int
  response    ResponseStatus
  comment     String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id])
  schedule    Schedule       @relation(fields: [scheduleId], references: [id])

  @@unique([scheduleId, userId]) // 複合一意キー制約
}

model EventImage {
  id        Int      @id @default(autoincrement())
  eventId   String
  imagePath String
  event     Event    @relation(fields: [eventId], references: [id])
}